# There are currently 3 compose file versions we can choose from.
# https://docs.docker.com/compose/compose-file/compose-versioning/
# v3 is most recent and swarm-mode compatible
# this might change at later releases
version: "3"
services:
  # web service
  web:
    # pull docker image we push to dockerhub.
    image: atlas7/py36-hello-flask:v0.0.1
    # this is how we deploy the web service
    deploy:
      # run 5 instances of that image as a service called `web`
      # increase this number to scale up, or reduce to scale down.
      replicas: 5
      # configure web service resource allocation
      resources:
        # limit each instance to run at this much resources at most
        # e.g. total max CPU would be `replicas` * `limits.cpus`
        # e.g. total max RAM would be `replicas` * `limits.memory`
        limits:
          # 10% CPU (across all cores)
          cpus: "0.1"
          # 50 MB of RAM
          memory: 50M
      # this is how we restart the web service
      restart_policy:
        # Immediate restart containers if one fails
        condition: on-failure
    # Map the world's port 80 (left) to web service port 80 (right)
    ports:
      - "80:80"
    # Instruct web’s containers to share port 80 via a load-balanced network called `webnet`.
    # (Internally, the containers themselves will publish to web service’s port 80 at an ephemeral port.)
    networks:
      - webnet

  # https://github.com/ManoMarks/docker-swarm-visualizer/blob/master/package.json
  # visualizer service
  visualizer:
      # pull docker image from dockerhub.
      image: dockersamples/visualizer:stable
      # Map the host's port 8080 (left) to visualizer service port 80 (right)
      ports:
        - "8080:8080"
      # giving the visualizer (right) access to the host’s socket file (left) for Docker
      volumes:
        - "/var/run/docker.sock:/var/run/docker.sock"
      deploy:
        placement:
          # ensuring that this service only ever runs on a swarm manager – never a worker.
          # That’s because this container, built from an open source project created by Docker,
          # displays Docker services running on a swarm in a diagram.
          #reminder: only a swarm manager can "see" all things within a swarm.
          constraints: [node.role == manager]
      # Instruct web’s containers to share port 8080 via a load-balanced network called `webnet`.
      # (Internally, the containers themselves will publish to visualizer service’s port 8080 at an ephemeral port.)
      networks:
        - webnet

  # redis database service
  redis:
    # official Docker image granted a short image name - so no username/redis needed
    image: redis
     # Map the host's port 6379 (left) to redis service port 6379 (right)
    ports:
      - "6379:6379"
    # Map the (manager) host's file system (left) to redis's container /data file system (right)
    # Together, this is creating a “source of truth” in your host’s physical filesystem for the Redis data.
    # Without this, Redis would store its data in /data inside the container’s filesystem,
    # which would get wiped out if that container were ever redeployed.
    # The volume you created that lets the container access ~/data (on the host) as /data (inside the Redis container).
    # While containers come and go, the files stored on ./data on the specified host will persist, enabling continuity.
    # Note: we need to explicitly create a directory on the host like this
    # docker-machine ssh myvm1 "mkdir /home/docker/data"  (this kind of thing might need to be automated later on)
    volumes:
      - /home/docker/data:/data
    deploy:
      placement:
        #Deploy on Manager (myvm1) only
        constraints: [node.role == manager]
    command: redis-server --appendonly yes
    networks:
      - webnet
networks:
  # Define the webnet network with the default settings (which is a load-balanced overlay network).
  webnet: